Advanced Go
Day 3 - Buenos Aires, Argentina
22 May 2018
Tags: golang, apis, http

Eduardo Acosta Miguens
eduardo.miguens@mercadolibre.com

Fernando Russ
fernando.russ@mercadolibre.com

* Diseño de una lib

- Pensar en interfaces (tienen que ser abstractas y future-prof)
- Separation of Concerns
- Testiability
- ...

* Plugins en Go 
 import "plugin"

- Permite cargar código compilado en runtime
- Es un mecanismo relativamente nuevo (Go 1.8)

un plugin:
.code example/plugin/plugin.go /START 1/,/END 1/ HLxxx

para compilarlo:

 go build -buildmode=plugin -o plugin.so plugin.go

* Plugins en Go (cont.)

se utiliza de la siguiente forma:
.code example/plugin/main.go /START 1/,/END 1/ HLxxx


* Diseño de un servicio

* Serializacion

* JSON
 import "encoding/json"

- Formato textual
- interoperable

.code example/serialize_json_test.go /START 1/,/END 1/ HLxxx

* gob

 import "encoding/gob"
 
- Formato binario
- *no* interoperable (de forma feliz)
- es nativo de Go

.code example/serialize_gob_test.go /START 1/,/END 1/ HLxxx

* MsgPack

 go get github.com/vmihailenco/msgpack

- Formato binary (rapido y eficiente)
- interoperable

.code example/serialize_msgpack_test.go /START 1/,/END 1/ HLxxx

* Protobuf3

 https://developers.google.com/protocol-buffers/

- Formato binary / textual (en general para debug)
- Interoperable
- Usa un generador de código

.code example/serialize_protobuf3_test.go /START 1/,/END 1/ HLxxx


* Transportes / RPCs

* REST (http)
- nativo

* gRPC
- Protobuf3 + HTTP/2 + ️️❤️
