Advanced Go
Day 1 - Buenos Aires, Argentina
15 May 2018
Tags: golang, apis, http

Eduardo Acosta Miguens
eduardo.miguens@mercadolibre.com

Fernando Russ
fernando.russ@mercadolibre.com

* Mini tour de Go

.code example/example1.go /START 1/,/END 1/

* Language Mechanics

* Embedding, not Inheritance

.code example/embedding.go /START 1/,/END 1/

su inicializacion,

.code example/embedding.go /START 2/,/END 2/

y el override de una función,
.code example/embedding.go /START 3/,/END 3/

* Interfaces

 type Reader struct {
     Read(p []bytes) (n int, err error)
 }

Lo cumple implicitamente cualquier función de la forma:

 func (d *algo) Read(p []bytes) (n int, err error)

además, es posible definir una interfaz por composicion:

 type ReaderWriterCloser struct {
     Reader
     Writer
     Closer
 }

y cumple con las tres interfaces puntuales

 func (d *algo) Read(p []bytes) (n int, err error)   // Reader 
 func (d *algo) Write(p []bytes) (n int, err error)  // Writer
 func (d *algo) Closer() error                       // Closer

* Error handling

Si tenemos esta funcion:

 func doSomething() (int64, error)

Manejamos el error cuando la llamamos de esta manera:

 value, err := doSomething();
 if err != nil {
     return fmt.Errorf("could not do something: %v", err)
 }

Esto es un antipattern... (pero se utiliza)

 if err := doSomething(); err != nil {
    panic(err)
 }


* Error handling: error values

definamos unos errores custom:
.code example/errs.go /START 1/,/END 1/

el uso de esos errores:
.code example/errs.go /START 2/,/END 2/

entonces el error checking sería:
.code example/errs.go /START 3/,/END 3/


* Error handling: error type 

definamos unos errores custom:
.code example/errs.go /START 4/,/END 4/
y cumple la interface error,
.code example/errs.go /START 5/,/END 5/
y entonces:
.code example/errs.go /START 6/,/END 6/

* Error handling: panic
TODO: Codigo (panic, recover)

.code example/errs.go /START 7/,/END 7/ HLxxx

No son exceptions!!!

* Paralelismo vs Concurrencia

.image ../img/concurrency_parallelism.png              

Una excelente charla!
Rob Pike (https://blog.golang.org/concurrency-is-not-parallelism)

* Goroutines

 go <callable>

puede ser algo como:

 go SlowProcessing()

otra forma de usarlo es con closures,

.code example/goroutines.go /START 1/,/END 1/

* Goroutines (cont.)

- NO! son threads.
- Hay un scheduler por cada runtime de Go.
- Son cooperativas.
 runtime.Gosched() // <- buuu
- En general todo el IO en Golang es async.


* Parallelism/Concurrency patterns

* Single Producer / Multiple Consumers

 // spawn N consumers
 for consumerId := 0; consumerId < numberOfConsumers ; consumerId++ {    
     go func(consumerId int, items chan Item) {
         for item := range items {            
             ProcessItem(consumerId, item)
         }
     }(consumerId, ch)
 }

 // producer
 items <- Item{}
 items <- Item{}
 ...
 close(items) 

* Multiple Producer / Single Consumers

 // spawn N producers
 for producerId := 0; producerId < numberOfProducers; producerId++ {    
     go func(producerId int, items chan Item) {
         for shouldProduce { // Produce multiple item.        
            items <- Item{}
         }        
     }(producerId, ch)
 }

 for item := range items {
    ProcessItem(item)
 }
 

* Race condition
TODO: Codigo roto

* BREAK
.image ../img/break.png

* Go synchronization primitives

* Mutex (locks?)
TODO:

* atomic
TODO:

* channels
TODO: Caveats (https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html)
Mostramos el ejemplo fixeado

* Concurrency Patterns (some...)

* WaitGroups (https://golang.org/pkg/sync/#WaitGroup)
TODO: Codigo

* errgroup (https://godoc.org/golang.org/x/sync/errgroup)
TODO: Codigo

* context.Context: cancellation and message passing
TODO: Codigo

* sync.Map
TODO: Codigo

* Workshop

* Nuestro Download Manager
- Que es un download manager?
- Que features queremos tener?

* Downloads por HTTP

* std net/http
- Intro a la lib de HTTP de golang
- accept range
- content length

* std io
- package io
- reader/writer
- io.Copy

* TAREA
Investigar sobre test, benchmarks y examples.
